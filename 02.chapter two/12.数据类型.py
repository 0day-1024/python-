'''
python数据类型的分类
'''

'''
整数是 Python 中表示整数数字的数据类型。整数可以是正数、负数或零，没有数值的大小限制。
应用场景：用于表示整数，如 1, 100, -10
num = 10         【整数 int】

浮点数用于表示带有小数点的数字，如 3.14 或 -0.001。
在 Python 中，浮点数采用 IEEE 754 标准表示，因此具有一定的精度限制。
应用场景：用于表示带小数部分的数字，如 3.14, -0.01, 2.0
pi = 3.14        【浮点数 float】

字符串是一系列字符的集合，可以使用单引号（' '）或双引号（" "）表示。
字符串是不可变对象，可以进行各种操作，如拼接、切片、替换等。
应用场景：用于表示文本信息的序列，如 'hello', "world", '123'
name = 'Alice'   【字符串 str】

布尔值用于表示逻辑真(True)或逻辑假(False)。布尔值通常用于条件判断和逻辑运算中。
应用场景：用于表示真(True)或假(False)的值
is_true = True   【布尔类型 bool】

#* None不是0，不是空字符串，不是False，它表示完全没有值
#* 应用场景：如果需要一个变量，但还不知道这个变量的值，可以先定义为None
my_wife = None   【空值类型 NoneType】

列表是 Python 中最常用的数据类型之一，用于存储一系列有序的元素。
列表使用方括号（[ ]）表示，可以包含任意类型的元素，且允许元素重复。
应用场景：用于存储一组数据，数据可以是不同类型的元素，并且可以进行增删改查等操作。
my_list = [1, 2, 3, 4, 5]   【列表 list】

元组与列表类似，也是用于存储一系列有序的元素，但是元组是不可变的对象，使用圆括号（( )）表示。
元组适合存储不可变的数据集合，如日期、坐标等。
应用场景：类似于列表，但是元组是不可变的，一旦创建就不能修改。
my_tuple = (1, 2, 3)        【元组 tuple】

集合是一种无序且不重复的集合，用于存储唯一的元素。
集合使用花括号（{ }）表示，可以进行交集、并集、差集等操作。
应用场景：用于存储一组唯一的元素，集合中的元素是无序的，且不重复。
my_set = {1, 2, 3, 4, 5}    【集合 set】

字典是一种键值对的集合，用于存储键值对的映射关系。
字典使用花括号（{ }）表示，每个键值对之间用逗号（,）分隔，键值对之间是无序的。
字典中的键必须是唯一的，但值可以重复。
应用场景：用于存储键值对的映射关系，适合用于构建数据字典、配置文件和数据传递等。
my_dict = {'name': 'Alice', 'age': 25}   【字典 dict】
......
'''

'''
实际应用场景
进销存系统示例

字符串常用于表示文本信息、文件操作和字符串处理等。
在进销存系统中，字符串可以用于表示商品名称、客户信息等文本数据。

列表、元组和集合常用于存储一组数据，并进行遍历、查找、添加和删除等操作。
在进销存系统中，可以使用列表存储商品信息、销售记录等数据。

字典常用于存储键值对的映射关系，其中键是唯一的且不可变的，值可以是任意类型的数据。
在进销存系统中，字典可以用于存储商品信息，其中商品编号作为键，商品名称、价格等信息作为值。
'''

'''
在一个进销存系统中，我们可以使用以上基本数据类型来存储和处理各种数据：

整数和浮点数：用于表示商品的数量、价格、销售额等数值数据。
布尔值：用于表示订单状态、库存状态等逻辑信息。
字符串：用于表示商品名称、客户信息、订单号等文本信息。
列表和元组：用于存储商品列表、订单详情等数据集合。
字典：用于构建商品信息字典、客户信息字典等数据结构。
'''

order = {
    'order_id': '20220508001', # 订单编号
    'customer': 'Alice',    # 客户名称
    'products': ['Apple', 'Banana', 'Orange'], # 订单商品列表
    'quantities': [5, 10, 8], # 商品数量列表
    'unit_prices': [2.5, 1.8, 3.0], # 商品单价列表
    'total_price': 57.0, # 订单总金额
    'is_paid': True, # 是否已付款
    'is_shipped': False # 是否已发货
}

#* 求字符串长度函数
#* 在字符串长度的计算中，无论是空格、数字还是符号，都会占据一个长度
#* 注意：如果是转义符，如"\n"，这种情况下，完整的转义符才占一个长度
message = "Hello, World!"
lenth = len(message)
print(lenth)
print(len('Hello\n'))

#* 提取出字符串某一位置上的单个字符
#* 格式：字符串[索引]  索引从0开始
print("Length"[3])
print(message[0])
print(message[len(message)-1])

#* 当不确定某个对象类型时，可以使用type()函数，它会返回你该对象的类型
print(type("Hello"))
print(type(6))
print(type(6.0))
print(type(True))
print(type(None))
print(type(order))
print(type(order['products']))

'''
数据类型的重要性
数据类型之所以重要，因为它决定了你能在该类型的对象身上运用哪些函数
函数是负责执行某个功能的，只有给它合适的输入，它才会给你正常的输出
例如，字符串类型上可以调用split()函数，列表类型上可以调用append()函数，等等
'''

# https://blog.csdn.net/wenbingy/article/details/138771466