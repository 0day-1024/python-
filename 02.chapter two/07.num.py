'''
整数
'''

#* 在 Python 中，可对整数（integer）执⾏加（+）减（-）乘（*）除（/）运算。
print(2 + 3)
print(3 - 2)
print(2 * 3)
print(3 / 2)

print("\n----------分界线----------\n")

#* Python 使⽤两个乘号（**）表⽰乘⽅运算
print(3 ** 2)
print(3 ** 3)
print(10 ** 6)

print("\n----------分界线----------\n")

#* Python 还⽀持运算顺序，因此可以在同⼀个表达式中使⽤多种运算。
#* 还可以使⽤括号来调整运算顺序，让 Python 按你指定的顺序执⾏运算。
print(2 + 3 * 4)
print((2 + 3) * 4)

print("\n----------分界线----------\n")

'''
浮点数
'''

#* Python 将带⼩数点的数称为浮点数（float）。
#* ⼤多数编程语⾔使⽤了这个术语，它指出了这样⼀个事实：⼩数点可出现在数的任何位置上。
#* 每种编程语⾔都必须细⼼设计，以妥善地处理浮点数，确保不管⼩数点出现在什么位置上，数的运算都是正确的。
print(0.1 + 0.1)
print(0.2 + 0.2)
print(2 * 0.1)
print(2 * 0.2)

print("\n----------分界线----------\n")

#* 需要注意的是，结果包含的⼩数位数可能是不确定的
#* 所有编程语⾔都存在这种问题，就现在⽽⾔，暂时忽略多余的⼩数位数即可。
print(0.2 + 0.1)
print(3 * 0.1)

print("\n----------分界线----------\n")

'''
整数和浮点数
'''

#* 将任意两个数相除，结果总是浮点数，即便这两个数都是整数且能整除。
print(4 / 2)

#* 在其他任何运算中，如果⼀个操作数是整数，另⼀个操作数是浮点数，结果也总是浮点数。
print(1 + 2.0)
print(2 * 3.0)
print(3.0 ** 2)

print("\n----------分界线----------\n")

'''
数中的下划线
'''

#* 在书写很⼤的数时，可使⽤下划线将其中的位分组，使其更清晰易读：
universe_age = 14_000_000_000

#* 当打印这种使⽤下划线定义的数字时，Python 不会打印其中的下划线。
#* 这是因为在存储这种数时，Python 会忽略其中的下划线。
print(universe_age)

print("\n----------分界线----------\n")

'''
同时给多个变量赋值
'''

#* 可在⼀⾏代码中给多个变量赋值，这有助于缩短程序并提⾼其可读性。这种做法最常⽤于将⼀系列数赋给⼀组变量。
#* 在这样做时，需要⽤逗号将变量名分开；对于要赋给变量的值，也需要做同样的处理。
#* Python 将按顺序将每个值赋给对应的变量。只要变量数和值的个数相同，Python 就能正确地将变量和值关联起来。
x, y, z = 0, 0, 0
print(x, y, z)

print("\n----------分界线----------\n")

'''
常量
'''
#* 常量（constant）是在程序的整个⽣命周期内都保持不变的变量。
#*Python 没有内置的常量类型，但 Python 程序员会使⽤全⼤写字⺟来指出应将某个变量视为常量，其值应始终不变
#* 在代码中，要指出应将特定的变量视为常量，可将其变量名全⼤写。
MAX_CONNECTIONS = 5000
print(MAX_CONNECTIONS)
